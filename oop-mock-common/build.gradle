/*
 * Copyright (c) 2022 CodeHead Systems. All rights reserved
 */

ext {
    appName = "oop-mock-common"
    version = "1.0"
}

configurations {
    project.archivesBaseName = "${appName}"
    jar.baseName = "${appName}"
}

jacocoTestReport.finalizedBy jacocoTestCoverageVerification

// Create the pom configuration:
def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "wolpert"
            name "Ned Wolpert"
            email "ned.wolpert@codeheadsystems.com"
        }
    }

    scm {
        url "https://github.com/wolpert/terrapin"
    }
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
    implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonDatabindVersion}")
    implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jdk8:${jacksonVersion}")
    implementation("com.google.guava:guava:${guavaVersion}")
    implementation("commons-io:commons-io:${commonsIoVersion}")

    // Dagger
    implementation "com.google.dagger:dagger:${daggerVersion}" // Common files for runtime
    annotationProcessor "com.google.dagger:dagger-compiler:${daggerVersion}"

    // Immutables
    implementation("org.immutables:value-annotations:${immutablesVersion}")
    annotationProcessor("org.immutables:value:${immutablesVersion}")

    testImplementation("com.codeheadsystems:codehead-test:${codeheadTestVersion}")
    testImplementation("org.assertj:assertj-core:${assertjVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-api:${jupiterVersion}")
    testImplementation("org.junit.jupiter:junit-jupiter-params:${jupiterVersion}")
    testImplementation("org.mockito:mockito-junit-jupiter:${mockitoVersion}")
    testImplementation("org.mockito:mockito-core:${mockitoVersion}")
    testImplementation("ch.qos.logback:logback-classic:${logbackVersion}")
    testImplementation("ch.qos.logback:logback-core:${logbackVersion}")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = appName
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'Opp-mock common'
                description = 'Common classes needed for the oop-mock project'
                url = 'https://github.com/wolpert/codehead-test'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'wolpert'
                        name = 'Ned Wolpert'
                        email = 'ned.wolpert@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/wolpert/codehead-test.git'
                    developerConnection = 'scm:git:ssh://github.com/wolpert/codehead-test.git'
                    url = 'https://github.com/wolpert/codehead-test/'
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            name = "ossrh"
            credentials(PasswordCredentials)
        }
    }
}

signing {
    useGpgCmd()
    sign publishing.publications.mavenJava
}
